z			    // try {
    //     if(config.modules.scaffoldA.enabled && scaffold_a_map.get(player)) {
    //         const place_location = {x: block.location.x, y: block.location.y, z: block.location.z};
    //         const last_place_location = scaffold_a_map.get(player).a;
    //         const old_place_location = scaffold_a_map.get(player).b;
    //         const pitch_values = scaffold_a_map.get(player).pitch;
    //         if(Math.abs(old_place_location.x) === Math.abs(last_place_location.x) && Math.abs(last_place_location.x) !== Math.abs(place_location.x)) {
    //             if(Math.abs(pitch_values.old - pitch_values.mid) < 3 && Math.abs(pitch_values.mid - player.getRotation().x) > 30) {
    //                 flag(player, "Scaffold", "A", "World", "pitch", player.getRotation().x, false);
    //             }
    //         }
            
    //         if(Math.abs(old_place_location.z === last_place_location.z)) {
    //             console.log("e");
    //         }
    //     }
    // } catch (e) {
    //     console.log(e);
    // }
    // try {
    //     scaffold_a_map.set(
    //         player,
    //         {a: {x: block.location.x, y: block.location.y, z: block.location.z},
    //         b: scaffold_a_map.get(player).a || 0,
    //         pitch: {new: player.getRotation().x, mid: scaffold_a_map.get(player).pitch.new || 0, old: scaffold_a_map.get(player).pitch.mid || 0},
    //         yaw: {new: player.getRotation().z, mid: scaffold_a_map.get(player).yaw.new || 0, old: scaffold_a_map.get(player).yaw.mid || 0}
    //     }
    //     );
    // } catch (e) {console.log(e)}

import * as Minecraft from "@minecraft/server";
import { flag, getScore, setScore } from "../../../util.js";
import config from "../../../data/config.js";
import { getSpeed } from "../../../utils/mathUtil.js";

// Make the map to store data
const lastUpdateTime = new Map();
const lastpos = new Map();
export function motion_d(player) {
    const playerVelocity = player.getVelocity();
    const playerSpeed = getSpeed(player);
    const now = Date.now();
    if(lastUpdateTime.get(player) && !player.hasTag("stairs") && config.experimental_checks && !player.isFlying && !player.hasTag("op")) {
        let max_value = 40
        const timeElapsed = now - lastUpdateTime.get(player)
        const lastPos = lastpos.get(player);
        // Calculate predicted position based on velocity
        const predictedX = lastPos.x + playerVelocity.x * timeElapsed / 1000.0;
        const predictedY = lastPos.y + playerVelocity.y * timeElapsed / 1000.0;
        const predictedZ = lastPos.z + playerVelocity.z * timeElapsed / 1000.0;

        // Get the actual position reported by the client
        const actualX = player.location.x;
        const actualY = player.location.y;
        const actualZ = player.location.z;
        if((player.hasTag("damaged") && !player.hasTag("fall_damage"))) {
            max_value += 50;
        }
        if(player.isJumping) {
            max_value += 50;
        }
        // Calculate the distance between predicted and actual positions
        const distance = Math.sqrt((predictedX - actualX) ** 2 + (predictedY - actualY) ** 2 + (predictedZ - actualZ) ** 2);

        if(config.modules.motionD.enabled && playerSpeed !== 0 && (Math.abs(lastPos.x - actualX) + Math.abs(lastPos.z - actualZ)) / 2 < 5 && !player.hasTag("placing") && !player.hasTag("slime") && player.fallDistance < 3 && !player.getEffect("speed")) {
        // Check if the distance exceeds the allowed limit
            if (distance > max_value * timeElapsed / 1000.0) {
                if(getScore(player, "motion_d_buffer", 0) > 4) {
                    // Possible cheating detected, take appropriate action
                    flag(player, "Motion", "D", "Movement", "speed", playerSpeed, false);
                }
            }
        }
    }
    setScore(player, "motion_d_reset", getScore(player, "motion_d_reset", 0) + 1)
    if(getScore(player, "motion_d_reset", 0) > 120) {
        setScore(player, "motion_d_reset", 0);
        setScore(player, "motion_d_buffer", 0);
    }
    lastUpdateTime.set(player, Date.now());
    lastpos.set(player, {x: player.location.x, y: player.location.y, z: player.location.z});
}
# make sure they are allowed to use this command
tellraw @s[type=player,tag=!op] {"rawtext":[{"text":"§r§j[§uIsolate§j]§r §4§lHey! §rYou must be Isolate-Opped to use this function."}]}
execute @s[tag=!op] ~~~ tellraw @a[tag=op] {"rawtext":[{"text":"§r§j[§uIsolate§j]§r "},{"selector":"@s"},{"text":" has tried to toggle auto-banning without op permissions."}]}

# allow
execute @s[type=player,tag=op,scores={autoban=..0}] ~~~ scoreboard players set scythe:config autoban 1
execute @s[type=player,tag=op,scores={autoban=..0}] ~~~ tellraw @a[tag=op] {"rawtext":[{"text":"§r§j[§uIsolate§j]§r "},{"selector":"@s"},{"text":" has enabled §aauto-banning."}]}

# deny
execute @s[type=player,tag=op,scores={autoban=1..}] ~~~ scoreboard players set scythe:config autoban 0
execute @s[type=player,tag=op,scores={autoban=1..}] ~~~ tellraw @a[tag=op] {"rawtext":[{"text":"§r§j[§uIsolate§j]§r "},{"selector":"@s"},{"text":" has disabled §4auto-banning."}]}

scoreboard players operation @a autoban = scythe:config autoban
